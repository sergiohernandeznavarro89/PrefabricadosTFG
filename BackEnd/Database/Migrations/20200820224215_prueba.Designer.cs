// <auto-generated />
using System;
using Database.BD.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200820224215_prueba")]
    partial class prueba
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.BD.Models.Albaran", b =>
                {
                    b.Property<int>("IdAlbaran")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFirma")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.HasKey("IdAlbaran");

                    b.HasIndex("IdPedido")
                        .IsUnique();

                    b.ToTable("Albaranes");
                });

            modelBuilder.Entity("Database.BD.Models.AlturaPiso", b =>
                {
                    b.Property<string>("IdAlturaPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grosor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAlturaPiso");

                    b.ToTable("AlturasPisos");
                });

            modelBuilder.Entity("Database.BD.Models.AlturaPisoMaterialPiso", b =>
                {
                    b.Property<int>("AlturaPisoId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialPisoId")
                        .HasColumnType("int");

                    b.Property<string>("AlturaPisoIdAlturaPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialPisoIdMaterialPiso")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlturaPisoId", "MaterialPisoId");

                    b.HasIndex("AlturaPisoIdAlturaPiso");

                    b.HasIndex("MaterialPisoIdMaterialPiso");

                    b.ToTable("AlturasPisosMaterialesPisos");
                });

            modelBuilder.Entity("Database.BD.Models.AlturaTapa", b =>
                {
                    b.Property<string>("IdAlturaTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grosor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAlturaTapa");

                    b.ToTable("AlturasTapas");
                });

            modelBuilder.Entity("Database.BD.Models.AlturaTapaMaterialTapa", b =>
                {
                    b.Property<int>("AlturaTapaId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialTapaId")
                        .HasColumnType("int");

                    b.Property<string>("AlturaTapaIdAlturaTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialTapaIdMaterialTapa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlturaTapaId", "MaterialTapaId");

                    b.HasIndex("AlturaTapaIdAlturaTapa");

                    b.HasIndex("MaterialTapaIdMaterialTapa");

                    b.ToTable("AlturasTapasMaterialesTapas");
                });

            modelBuilder.Entity("Database.BD.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodPostal")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Descuento")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreComercial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poblacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Subida")
                        .HasColumnType("int");

                    b.Property<int>("Telefono1")
                        .HasColumnType("int");

                    b.Property<int>("Telefono2")
                        .HasColumnType("int");

                    b.Property<DateTime>("VencimientoFijo")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Database.BD.Models.ClienteFormaPago", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int");

                    b.HasKey("ClienteId", "FormaPagoId");

                    b.HasIndex("FormaPagoId");

                    b.ToTable("ClientesFormasPago");
                });

            modelBuilder.Entity("Database.BD.Models.Cobro", b =>
                {
                    b.Property<int>("IdCobro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCobroPrevista")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRealizacionCobro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdRemesa")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoIdPedido")
                        .HasColumnType("int");

                    b.Property<int?>("RemesaIdRemesa")
                        .HasColumnType("int");

                    b.HasKey("IdCobro");

                    b.HasIndex("ClienteIdCliente");

                    b.HasIndex("PedidoIdPedido");

                    b.HasIndex("RemesaIdRemesa");

                    b.ToTable("Cobros");
                });

            modelBuilder.Entity("Database.BD.Models.ColorCerco", b =>
                {
                    b.Property<string>("IdColorCerco")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RGB")
                        .HasColumnType("int");

                    b.HasKey("IdColorCerco");

                    b.ToTable("ColoresCercos");
                });

            modelBuilder.Entity("Database.BD.Models.ColorCercoMaterialCerco", b =>
                {
                    b.Property<int>("ColorCercoId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialCercoId")
                        .HasColumnType("int");

                    b.Property<string>("ColorCeroIdColorCerco")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialCercoIdMaterialCerco")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ColorCercoId", "MaterialCercoId");

                    b.HasIndex("ColorCeroIdColorCerco");

                    b.HasIndex("MaterialCercoIdMaterialCerco");

                    b.ToTable("ColoresCercoMaterialesCerco");
                });

            modelBuilder.Entity("Database.BD.Models.ColorPiso", b =>
                {
                    b.Property<string>("IdColorPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RGB")
                        .HasColumnType("int");

                    b.HasKey("IdColorPiso");

                    b.ToTable("ColoresPisos");
                });

            modelBuilder.Entity("Database.BD.Models.ColorPisoMaterialPiso", b =>
                {
                    b.Property<int>("ColorPisoId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialPisoId")
                        .HasColumnType("int");

                    b.Property<string>("ColorPisoIdColorPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialPisoIdMaterialPiso")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ColorPisoId", "MaterialPisoId");

                    b.HasIndex("ColorPisoIdColorPiso");

                    b.HasIndex("MaterialPisoIdMaterialPiso");

                    b.ToTable("ColoresPisosMaterialesPisos");
                });

            modelBuilder.Entity("Database.BD.Models.ColorTapa", b =>
                {
                    b.Property<string>("IdColorTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RGB")
                        .HasColumnType("int");

                    b.HasKey("IdColorTapa");

                    b.ToTable("ColoresTapas");
                });

            modelBuilder.Entity("Database.BD.Models.ColorTapaMaterialTapa", b =>
                {
                    b.Property<int>("ColorTapaId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialTapaId")
                        .HasColumnType("int");

                    b.Property<string>("ColorTapaIdColorTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialTapaIdMaterialTapa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ColorTapaId", "MaterialTapaId");

                    b.HasIndex("ColorTapaIdColorTapa");

                    b.HasIndex("MaterialTapaIdMaterialTapa");

                    b.ToTable("ColoresTapasMaterialesTapas");
                });

            modelBuilder.Entity("Database.BD.Models.ColorTintado", b =>
                {
                    b.Property<string>("IdColorTintado")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RGB")
                        .HasColumnType("int");

                    b.HasKey("IdColorTintado");

                    b.ToTable("ColoresTintados");
                });

            modelBuilder.Entity("Database.BD.Models.Empleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IBAN")
                        .HasColumnType("int");

                    b.Property<string>("Nif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poblacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("IdEmpleado");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("Database.BD.Models.Escandallo", b =>
                {
                    b.Property<int>("IdEscandallo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlturaPisoIdAlturaPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlturaTapaIdAlturaTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<string>("ColorCercoIdColorCerco")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorPîsoIdColorPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorTapaIdColorTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorTintadoIdColorTintado")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DescuentoPrecio")
                        .HasColumnType("int");

                    b.Property<int?>("HormaIdHorma")
                        .HasColumnType("int");

                    b.Property<int>("IdAlturaPiso")
                        .HasColumnType("int");

                    b.Property<int>("IdAlturaTapa")
                        .HasColumnType("int");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdColorCerco")
                        .HasColumnType("int");

                    b.Property<int>("IdColorPiso")
                        .HasColumnType("int");

                    b.Property<int>("IdColorTapa")
                        .HasColumnType("int");

                    b.Property<int>("IdColorTintado")
                        .HasColumnType("int");

                    b.Property<int>("IdHorma")
                        .HasColumnType("int");

                    b.Property<int>("IdMaterialCerco")
                        .HasColumnType("int");

                    b.Property<int>("IdMaterialPiso")
                        .HasColumnType("int");

                    b.Property<int>("IdMaterialTapa")
                        .HasColumnType("int");

                    b.Property<int>("IdSerie")
                        .HasColumnType("int");

                    b.Property<int>("IdTrabajo")
                        .HasColumnType("int");

                    b.Property<int>("IdTroquelPiso")
                        .HasColumnType("int");

                    b.Property<int>("IdTroquelTapa")
                        .HasColumnType("int");

                    b.Property<string>("LineasSerie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialCercoIdMaterialCerco")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialPisoIdMaterialPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialTapaIdMaterialTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SerieIdSerie")
                        .HasColumnType("int");

                    b.Property<int>("SubidaPrecio")
                        .HasColumnType("int");

                    b.Property<int?>("TrabajoIdTrabajo")
                        .HasColumnType("int");

                    b.Property<int?>("TroquelPisoIdTroquelPiso")
                        .HasColumnType("int");

                    b.Property<int?>("TroquelTapaIdTroquelTapa")
                        .HasColumnType("int");

                    b.HasKey("IdEscandallo");

                    b.HasIndex("AlturaPisoIdAlturaPiso");

                    b.HasIndex("AlturaTapaIdAlturaTapa");

                    b.HasIndex("ClienteIdCliente");

                    b.HasIndex("ColorCercoIdColorCerco");

                    b.HasIndex("ColorPîsoIdColorPiso");

                    b.HasIndex("ColorTapaIdColorTapa");

                    b.HasIndex("ColorTintadoIdColorTintado");

                    b.HasIndex("HormaIdHorma");

                    b.HasIndex("MaterialCercoIdMaterialCerco");

                    b.HasIndex("MaterialPisoIdMaterialPiso");

                    b.HasIndex("MaterialTapaIdMaterialTapa");

                    b.HasIndex("SerieIdSerie");

                    b.HasIndex("TrabajoIdTrabajo");

                    b.HasIndex("TroquelPisoIdTroquelPiso");

                    b.HasIndex("TroquelTapaIdTroquelTapa");

                    b.ToTable("Escandallos");
                });

            modelBuilder.Entity("Database.BD.Models.EscandalloPedido", b =>
                {
                    b.Property<int>("EscandalloId")
                        .HasColumnType("int");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.HasKey("EscandalloId", "PedidoId");

                    b.HasIndex("PedidoId");

                    b.ToTable("EscandallosPedidos");
                });

            modelBuilder.Entity("Database.BD.Models.Factura", b =>
                {
                    b.Property<int>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFirma")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.HasKey("IdFactura");

                    b.HasIndex("IdPedido")
                        .IsUnique();

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Database.BD.Models.FormaPago", b =>
                {
                    b.Property<int>("IdFormaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroPagos")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("giro")
                        .HasColumnType("int");

                    b.HasKey("IdFormaPago");

                    b.ToTable("FormasPago");
                });

            modelBuilder.Entity("Database.BD.Models.Horma", b =>
                {
                    b.Property<int>("IdHorma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHorma");

                    b.HasIndex("ClienteIdCliente");

                    b.ToTable("Hormas");
                });

            modelBuilder.Entity("Database.BD.Models.HormaTroquelPiso", b =>
                {
                    b.Property<int>("HormaId")
                        .HasColumnType("int");

                    b.Property<int>("TroquelPisoId")
                        .HasColumnType("int");

                    b.HasKey("HormaId", "TroquelPisoId");

                    b.HasIndex("TroquelPisoId");

                    b.ToTable("HormasTroquelesPisos");
                });

            modelBuilder.Entity("Database.BD.Models.HormaTroquelTapa", b =>
                {
                    b.Property<int>("HormaId")
                        .HasColumnType("int");

                    b.Property<int>("TroquelTapaId")
                        .HasColumnType("int");

                    b.HasKey("HormaId", "TroquelTapaId");

                    b.HasIndex("TroquelTapaId");

                    b.ToTable("HormasTroquelesTapas");
                });

            modelBuilder.Entity("Database.BD.Models.LineaSerie", b =>
                {
                    b.Property<int>("IdLineaSerie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDesde")
                        .HasColumnType("int");

                    b.Property<int>("NumeroHasta")
                        .HasColumnType("int");

                    b.HasKey("IdLineaSerie");

                    b.ToTable("LineasSerie");
                });

            modelBuilder.Entity("Database.BD.Models.LineaSerieEscandallo", b =>
                {
                    b.Property<int>("LineaSerieId")
                        .HasColumnType("int");

                    b.Property<int>("EscandalloId")
                        .HasColumnType("int");

                    b.HasKey("LineaSerieId", "EscandalloId");

                    b.HasIndex("EscandalloId");

                    b.ToTable("LineasSerieEscandallos");
                });

            modelBuilder.Entity("Database.BD.Models.LineaSeriePedido", b =>
                {
                    b.Property<int>("LineaSerieId")
                        .HasColumnType("int");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.HasKey("LineaSerieId", "PedidoId");

                    b.HasIndex("PedidoId");

                    b.ToTable("LineasSeriePedidos");
                });

            modelBuilder.Entity("Database.BD.Models.LineaSerieSerie", b =>
                {
                    b.Property<int>("LineaSerieId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("LineaSerieId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("LineasSerieSerie");
                });

            modelBuilder.Entity("Database.BD.Models.MaterialCerco", b =>
                {
                    b.Property<string>("IdMaterialCerco")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMaterialCerco");

                    b.ToTable("MaterialesCercos");
                });

            modelBuilder.Entity("Database.BD.Models.MaterialPiso", b =>
                {
                    b.Property<string>("IdMaterialPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMaterialPiso");

                    b.ToTable("MaterialesPisos");
                });

            modelBuilder.Entity("Database.BD.Models.MaterialTapa", b =>
                {
                    b.Property<string>("IdMaterialTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMaterialTapa");

                    b.ToTable("MaterialesTapas");
                });

            modelBuilder.Entity("Database.BD.Models.Nomina", b =>
                {
                    b.Property<int>("IdNomina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpleadoIdEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("IdTrabajo")
                        .HasColumnType("int");

                    b.Property<float>("Importe")
                        .HasColumnType("real");

                    b.Property<int?>("TrabajoIdTrabajo")
                        .HasColumnType("int");

                    b.HasKey("IdNomina");

                    b.HasIndex("EmpleadoIdEmpleado");

                    b.HasIndex("TrabajoIdTrabajo");

                    b.ToTable("Nominas");
                });

            modelBuilder.Entity("Database.BD.Models.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlturaPisoIdAlturaPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlturaTapaIdAlturaTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<string>("CodigoPedidoCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorCercoIdColorCerco")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorPisoIdColorPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorTapaIdColorTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorTintadoIdColorTintado")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaServicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FormaPagoIdFormaPago")
                        .HasColumnType("int");

                    b.Property<int?>("HormaIdHorma")
                        .HasColumnType("int");

                    b.Property<int?>("IdAlturaPiso")
                        .HasColumnType("int");

                    b.Property<int?>("IdAlturaTapa")
                        .HasColumnType("int");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int?>("IdColorCerco")
                        .HasColumnType("int");

                    b.Property<int?>("IdColorPiso")
                        .HasColumnType("int");

                    b.Property<int?>("IdColorTapa")
                        .HasColumnType("int");

                    b.Property<int?>("IdColorTintado")
                        .HasColumnType("int");

                    b.Property<int?>("IdFormaPago")
                        .HasColumnType("int");

                    b.Property<int?>("IdHorma")
                        .HasColumnType("int");

                    b.Property<int?>("IdMaterialCerco")
                        .HasColumnType("int");

                    b.Property<int?>("IdMaterialPiso")
                        .HasColumnType("int");

                    b.Property<int?>("IdMaterialTapa")
                        .HasColumnType("int");

                    b.Property<int?>("IdSerie")
                        .HasColumnType("int");

                    b.Property<int?>("IdTroquelPiso")
                        .HasColumnType("int");

                    b.Property<int?>("IdTroquelTapa")
                        .HasColumnType("int");

                    b.Property<string>("MaterialCercoIdMaterialCerco")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialPisoIdMaterialPiso")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialTapaIdMaterialTapa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrecioTotal")
                        .HasColumnType("int");

                    b.Property<int?>("SerieIdSerie")
                        .HasColumnType("int");

                    b.Property<int>("TotalPares")
                        .HasColumnType("int");

                    b.Property<int?>("TroquelPisoIdTroquelPiso")
                        .HasColumnType("int");

                    b.Property<int?>("TroquelTapaIdTroquelTapa")
                        .HasColumnType("int");

                    b.HasKey("IdPedido");

                    b.HasIndex("AlturaPisoIdAlturaPiso");

                    b.HasIndex("AlturaTapaIdAlturaTapa");

                    b.HasIndex("ClienteIdCliente");

                    b.HasIndex("ColorCercoIdColorCerco");

                    b.HasIndex("ColorPisoIdColorPiso");

                    b.HasIndex("ColorTapaIdColorTapa");

                    b.HasIndex("ColorTintadoIdColorTintado");

                    b.HasIndex("FormaPagoIdFormaPago");

                    b.HasIndex("HormaIdHorma");

                    b.HasIndex("MaterialCercoIdMaterialCerco");

                    b.HasIndex("MaterialPisoIdMaterialPiso");

                    b.HasIndex("MaterialTapaIdMaterialTapa");

                    b.HasIndex("SerieIdSerie");

                    b.HasIndex("TroquelPisoIdTroquelPiso");

                    b.HasIndex("TroquelTapaIdTroquelTapa");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Database.BD.Models.Remesa", b =>
                {
                    b.Property<int>("IdRemesa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPresentacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("URLRemesa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRemesa");

                    b.ToTable("Remesas");
                });

            modelBuilder.Entity("Database.BD.Models.RemesaCliente", b =>
                {
                    b.Property<int>("RemesaId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.HasKey("RemesaId", "ClienteId");

                    b.HasIndex("ClienteId");

                    b.ToTable("RemesaCliente");
                });

            modelBuilder.Entity("Database.BD.Models.Serie", b =>
                {
                    b.Property<int>("IdSerie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.HasKey("IdSerie");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Database.BD.Models.TareaRealizada", b =>
                {
                    b.Property<int>("IdTareaRealizada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpleadoIdEmpleado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRealizacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasDedicadas")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.Property<int?>("IdNomina")
                        .HasColumnType("int");

                    b.Property<int?>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdTrabajo")
                        .HasColumnType("int");

                    b.Property<int?>("NominaIdNomina")
                        .HasColumnType("int");

                    b.Property<int>("ParesRealizados")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoIdPedido")
                        .HasColumnType("int");

                    b.Property<int?>("TrabajoIdTrabajo")
                        .HasColumnType("int");

                    b.HasKey("IdTareaRealizada");

                    b.HasIndex("EmpleadoIdEmpleado");

                    b.HasIndex("NominaIdNomina");

                    b.HasIndex("PedidoIdPedido");

                    b.HasIndex("TrabajoIdTrabajo");

                    b.ToTable("TareasRealizadas");
                });

            modelBuilder.Entity("Database.BD.Models.Trabajo", b =>
                {
                    b.Property<int>("IdTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.HasKey("IdTrabajo");

                    b.ToTable("Trabajos");
                });

            modelBuilder.Entity("Database.BD.Models.TrabajoPedido", b =>
                {
                    b.Property<int>("IdTrabajoPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdTrabajo")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoIdPedido")
                        .HasColumnType("int");

                    b.Property<int?>("TrabajoIdTrabajo")
                        .HasColumnType("int");

                    b.HasKey("IdTrabajoPedido");

                    b.HasIndex("PedidoIdPedido");

                    b.HasIndex("TrabajoIdTrabajo");

                    b.ToTable("TrabajosPedidos");
                });

            modelBuilder.Entity("Database.BD.Models.TroquelPiso", b =>
                {
                    b.Property<int>("IdTroquelPiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTroquelPiso");

                    b.HasIndex("ClienteIdCliente");

                    b.ToTable("TroquelesPisos");
                });

            modelBuilder.Entity("Database.BD.Models.TroquelTapa", b =>
                {
                    b.Property<int>("IdTroquelTapa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteIdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTroquelTapa");

                    b.HasIndex("ClienteIdCliente");

                    b.ToTable("TroquelesTapas");
                });

            modelBuilder.Entity("Database.BD.Models.Albaran", b =>
                {
                    b.HasOne("Database.BD.Models.Pedido", "Pedido")
                        .WithOne("Albaran")
                        .HasForeignKey("Database.BD.Models.Albaran", "IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.AlturaPisoMaterialPiso", b =>
                {
                    b.HasOne("Database.BD.Models.AlturaPiso", "AlturaPiso")
                        .WithMany("AlturasPisoMaterialesPiso")
                        .HasForeignKey("AlturaPisoIdAlturaPiso");

                    b.HasOne("Database.BD.Models.MaterialPiso", "MaterialPiso")
                        .WithMany("AlturasPisoMaterialesPiso")
                        .HasForeignKey("MaterialPisoIdMaterialPiso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.AlturaTapaMaterialTapa", b =>
                {
                    b.HasOne("Database.BD.Models.AlturaTapa", "AlturaTapa")
                        .WithMany("AlturasTapaMaterialesTapa")
                        .HasForeignKey("AlturaTapaIdAlturaTapa");

                    b.HasOne("Database.BD.Models.MaterialTapa", "MaterialTapa")
                        .WithMany("AlturasTapaMaterialesTapa")
                        .HasForeignKey("MaterialTapaIdMaterialTapa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.ClienteFormaPago", b =>
                {
                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany("ClientesFormasPago")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.FormaPago", "FormaPago")
                        .WithMany("ClientesFormasPago")
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.Cobro", b =>
                {
                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany("Cobros")
                        .HasForeignKey("ClienteIdCliente");

                    b.HasOne("Database.BD.Models.Pedido", "Pedido")
                        .WithMany("Cobros")
                        .HasForeignKey("PedidoIdPedido");

                    b.HasOne("Database.BD.Models.Remesa", "Remesa")
                        .WithMany("Cobros")
                        .HasForeignKey("RemesaIdRemesa");
                });

            modelBuilder.Entity("Database.BD.Models.ColorCercoMaterialCerco", b =>
                {
                    b.HasOne("Database.BD.Models.ColorCerco", "ColorCero")
                        .WithMany("ColoresCercoMaterialesCerco")
                        .HasForeignKey("ColorCeroIdColorCerco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.MaterialCerco", "MaterialCerco")
                        .WithMany("ColoresCercoMaterialesCerco")
                        .HasForeignKey("MaterialCercoIdMaterialCerco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.ColorPisoMaterialPiso", b =>
                {
                    b.HasOne("Database.BD.Models.ColorPiso", "ColorPiso")
                        .WithMany("ColoresPisoMaterialesPiso")
                        .HasForeignKey("ColorPisoIdColorPiso");

                    b.HasOne("Database.BD.Models.MaterialPiso", "MaterialPiso")
                        .WithMany("ColoresPisoMaterialesPiso")
                        .HasForeignKey("MaterialPisoIdMaterialPiso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.ColorTapaMaterialTapa", b =>
                {
                    b.HasOne("Database.BD.Models.ColorTapa", "ColorTapa")
                        .WithMany("ColoresTapaMaterialesTapa")
                        .HasForeignKey("ColorTapaIdColorTapa");

                    b.HasOne("Database.BD.Models.MaterialTapa", "MaterialTapa")
                        .WithMany("ColoresTapaMaterialesTapa")
                        .HasForeignKey("MaterialTapaIdMaterialTapa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.Escandallo", b =>
                {
                    b.HasOne("Database.BD.Models.AlturaPiso", "AlturaPiso")
                        .WithMany("Escandallos")
                        .HasForeignKey("AlturaPisoIdAlturaPiso");

                    b.HasOne("Database.BD.Models.AlturaTapa", "AlturaTapa")
                        .WithMany("Escandallos")
                        .HasForeignKey("AlturaTapaIdAlturaTapa");

                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany("Escandallos")
                        .HasForeignKey("ClienteIdCliente");

                    b.HasOne("Database.BD.Models.ColorCerco", "ColorCerco")
                        .WithMany("Escandallos")
                        .HasForeignKey("ColorCercoIdColorCerco");

                    b.HasOne("Database.BD.Models.ColorPiso", "ColorPîso")
                        .WithMany("Escandallos")
                        .HasForeignKey("ColorPîsoIdColorPiso");

                    b.HasOne("Database.BD.Models.ColorTapa", "ColorTapa")
                        .WithMany("Escandallos")
                        .HasForeignKey("ColorTapaIdColorTapa");

                    b.HasOne("Database.BD.Models.ColorTintado", "ColorTintado")
                        .WithMany("Escandallos")
                        .HasForeignKey("ColorTintadoIdColorTintado");

                    b.HasOne("Database.BD.Models.Horma", "Horma")
                        .WithMany("Escandallos")
                        .HasForeignKey("HormaIdHorma");

                    b.HasOne("Database.BD.Models.MaterialCerco", "MaterialCerco")
                        .WithMany("Escandallos")
                        .HasForeignKey("MaterialCercoIdMaterialCerco");

                    b.HasOne("Database.BD.Models.MaterialPiso", "MaterialPiso")
                        .WithMany("Escandallos")
                        .HasForeignKey("MaterialPisoIdMaterialPiso");

                    b.HasOne("Database.BD.Models.MaterialTapa", "MaterialTapa")
                        .WithMany("Escandallos")
                        .HasForeignKey("MaterialTapaIdMaterialTapa");

                    b.HasOne("Database.BD.Models.Serie", "Serie")
                        .WithMany("Escandallos")
                        .HasForeignKey("SerieIdSerie");

                    b.HasOne("Database.BD.Models.Trabajo", "Trabajo")
                        .WithMany("Escandallos")
                        .HasForeignKey("TrabajoIdTrabajo");

                    b.HasOne("Database.BD.Models.TroquelPiso", "TroquelPiso")
                        .WithMany("Escandallos")
                        .HasForeignKey("TroquelPisoIdTroquelPiso");

                    b.HasOne("Database.BD.Models.TroquelTapa", "TroquelTapa")
                        .WithMany("Escandallos")
                        .HasForeignKey("TroquelTapaIdTroquelTapa");
                });

            modelBuilder.Entity("Database.BD.Models.EscandalloPedido", b =>
                {
                    b.HasOne("Database.BD.Models.Escandallo", "Escandallo")
                        .WithMany("EscandallosPedidos")
                        .HasForeignKey("EscandalloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.Pedido", "Pedido")
                        .WithMany("EscandallosPedidos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.Factura", b =>
                {
                    b.HasOne("Database.BD.Models.Pedido", "Pedido")
                        .WithOne("Factura")
                        .HasForeignKey("Database.BD.Models.Factura", "IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.Horma", b =>
                {
                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany("Hormas")
                        .HasForeignKey("ClienteIdCliente");
                });

            modelBuilder.Entity("Database.BD.Models.HormaTroquelPiso", b =>
                {
                    b.HasOne("Database.BD.Models.Horma", "Horma")
                        .WithMany("HormasTroquelesPiso")
                        .HasForeignKey("HormaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.TroquelPiso", "TroquelPiso")
                        .WithMany("HormasTroquelesPiso")
                        .HasForeignKey("TroquelPisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.HormaTroquelTapa", b =>
                {
                    b.HasOne("Database.BD.Models.Horma", "Horma")
                        .WithMany("HormasTroquelesTapa")
                        .HasForeignKey("HormaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.TroquelTapa", "TroquelTapa")
                        .WithMany("HormasTroquelesTapa")
                        .HasForeignKey("TroquelTapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.LineaSerieEscandallo", b =>
                {
                    b.HasOne("Database.BD.Models.Escandallo", "Escandallo")
                        .WithMany("LineasSerieEscandallos")
                        .HasForeignKey("EscandalloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.LineaSerie", "LineaSerie")
                        .WithMany("LineasSerieEscandallos")
                        .HasForeignKey("LineaSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.LineaSeriePedido", b =>
                {
                    b.HasOne("Database.BD.Models.LineaSerie", "LineaSerie")
                        .WithMany("LineasSeriePedidos")
                        .HasForeignKey("LineaSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.Pedido", "Pedido")
                        .WithMany("LineasSeriePedidos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.LineaSerieSerie", b =>
                {
                    b.HasOne("Database.BD.Models.LineaSerie", "LineaSerie")
                        .WithMany("LineasSerieSeries")
                        .HasForeignKey("LineaSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.Serie", "Serie")
                        .WithMany("LineasSerieSeries")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.Nomina", b =>
                {
                    b.HasOne("Database.BD.Models.Empleado", "Empleado")
                        .WithMany("Nominas")
                        .HasForeignKey("EmpleadoIdEmpleado");

                    b.HasOne("Database.BD.Models.Trabajo", "Trabajo")
                        .WithMany()
                        .HasForeignKey("TrabajoIdTrabajo");
                });

            modelBuilder.Entity("Database.BD.Models.Pedido", b =>
                {
                    b.HasOne("Database.BD.Models.AlturaPiso", "AlturaPiso")
                        .WithMany("Pedidos")
                        .HasForeignKey("AlturaPisoIdAlturaPiso");

                    b.HasOne("Database.BD.Models.AlturaTapa", "AlturaTapa")
                        .WithMany("Pedidos")
                        .HasForeignKey("AlturaTapaIdAlturaTapa");

                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteIdCliente");

                    b.HasOne("Database.BD.Models.ColorCerco", "ColorCerco")
                        .WithMany("Pedidos")
                        .HasForeignKey("ColorCercoIdColorCerco");

                    b.HasOne("Database.BD.Models.ColorPiso", "ColorPiso")
                        .WithMany("Pedidos")
                        .HasForeignKey("ColorPisoIdColorPiso");

                    b.HasOne("Database.BD.Models.ColorTapa", "ColorTapa")
                        .WithMany("Pedidos")
                        .HasForeignKey("ColorTapaIdColorTapa");

                    b.HasOne("Database.BD.Models.ColorTintado", "ColorTintado")
                        .WithMany("Pedidos")
                        .HasForeignKey("ColorTintadoIdColorTintado");

                    b.HasOne("Database.BD.Models.FormaPago", "FormaPago")
                        .WithMany("Pedidos")
                        .HasForeignKey("FormaPagoIdFormaPago");

                    b.HasOne("Database.BD.Models.Horma", "Horma")
                        .WithMany("Pedidos")
                        .HasForeignKey("HormaIdHorma");

                    b.HasOne("Database.BD.Models.MaterialCerco", "MaterialCerco")
                        .WithMany("Pedidos")
                        .HasForeignKey("MaterialCercoIdMaterialCerco");

                    b.HasOne("Database.BD.Models.MaterialPiso", "MaterialPiso")
                        .WithMany("Pedidos")
                        .HasForeignKey("MaterialPisoIdMaterialPiso");

                    b.HasOne("Database.BD.Models.MaterialTapa", "MaterialTapa")
                        .WithMany("Pedidos")
                        .HasForeignKey("MaterialTapaIdMaterialTapa");

                    b.HasOne("Database.BD.Models.Serie", "Serie")
                        .WithMany("Pedidos")
                        .HasForeignKey("SerieIdSerie");

                    b.HasOne("Database.BD.Models.TroquelPiso", "TroquelPiso")
                        .WithMany("Pedidos")
                        .HasForeignKey("TroquelPisoIdTroquelPiso");

                    b.HasOne("Database.BD.Models.TroquelTapa", "TroquelTapa")
                        .WithMany("Pedidos")
                        .HasForeignKey("TroquelTapaIdTroquelTapa");
                });

            modelBuilder.Entity("Database.BD.Models.RemesaCliente", b =>
                {
                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany("RemesasClientes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.BD.Models.Remesa", "Remesa")
                        .WithMany("RemesasClientes")
                        .HasForeignKey("RemesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.BD.Models.TareaRealizada", b =>
                {
                    b.HasOne("Database.BD.Models.Empleado", "Empleado")
                        .WithMany("TareasRealizadas")
                        .HasForeignKey("EmpleadoIdEmpleado");

                    b.HasOne("Database.BD.Models.Nomina", "Nomina")
                        .WithMany("TareasRealizadas")
                        .HasForeignKey("NominaIdNomina");

                    b.HasOne("Database.BD.Models.Pedido", null)
                        .WithMany("TareasRealizadas")
                        .HasForeignKey("PedidoIdPedido");

                    b.HasOne("Database.BD.Models.Trabajo", "Trabajo")
                        .WithMany("TareasRealizadas")
                        .HasForeignKey("TrabajoIdTrabajo");
                });

            modelBuilder.Entity("Database.BD.Models.TrabajoPedido", b =>
                {
                    b.HasOne("Database.BD.Models.Pedido", "Pedido")
                        .WithMany("TrabajosPedidos")
                        .HasForeignKey("PedidoIdPedido");

                    b.HasOne("Database.BD.Models.Trabajo", "Trabajo")
                        .WithMany("TrabajosPedidos")
                        .HasForeignKey("TrabajoIdTrabajo");
                });

            modelBuilder.Entity("Database.BD.Models.TroquelPiso", b =>
                {
                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteIdCliente");
                });

            modelBuilder.Entity("Database.BD.Models.TroquelTapa", b =>
                {
                    b.HasOne("Database.BD.Models.Cliente", "Cliente")
                        .WithMany("TroquelesTapaPropios")
                        .HasForeignKey("ClienteIdCliente");
                });
#pragma warning restore 612, 618
        }
    }
}
